---
- name: Create new volumes based on information in csv file
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - vars/authentication.yml
 
  tasks:
  - name: Use ibm_spectrum_virtualize.ibm_svc_auth to generate API token
    ibm.storage_virtualize.ibm_svc_auth:
      clustername: "{{ clustername }}"
      username: "{{ username }}"
      password: "{{ _password_ }}"
    register: result
    no_log: true

  - name: Read the csv file containing volume information
    community.general.read_csv:
      path: vars/volume.csv
    register: managed_volumes

  - name: Create and Change volumes in FlashSystem
    ibm.storage_virtualize.ibm_svc_manage_volume:
      clustername: "{{ clustername }}"
      log_path: /home/ansible/playbooks/flashsystem_setup/pylog2.log
      state: "{{ item.volume_state }}"
      name: "{{ item.name }}"
      size: "{{ item.size }}"
      unit: "{{ item.unit }}"
      thin: "{{ item.thin }}"
      pool: "{{ item.pool }}"
      token: "{{ result.token }}"
    loop: "{{ managed_volumes.list }}"
    register: response

  - name: Map volumes to hosts based on information from csv file
    # again, uses managed_volumes.list as the source of the information
    ibm.storage_virtualize.ibm_svc_vol_map:
      clustername: "{{ clustername }}"
      host: "{{ item.hostname }}"
      state: present
      volname: "{{ item.name }}"
      log_path: '/tmp/map_volume_to_host.debug'
      token: "{{ result.token }}"
    when: (item.hostname != '') and (item.volume_state == 'present')
    loop: "{{ managed_volumes.list }}"
  
  - name: Gather data from FlashSystems about added and mapped volumes for use in creating datastores
    ibm.storage_virtualize.ibm_svc_info:
      clustername: "{{ clustername }}"
      token: "{{ result.token }}"
      gather_subset: vol
    register: volumes_attributes

  - name: Create esx_volumes fact containing necessary values from managed_volumes.list to create esx datastore (uid will still be needed)
    # This step is just getting rid of variables that aren't needed for simplicity
    ansible.builtin.set_fact:
      esx_volumes:  "{{ esx_volumes | default([]) + [ {'name': item.name, 'host_fqdn': item.host_fqdn, 'esx_datastore_name': item.esx_datastore_name, 'esx_datastore_type': item.esx_datastore_type} ] }}" 
    when: item.os == 'esx'
    loop: "{{ managed_volumes.list }}"

  - name: Create new fact for the new volumes along with the uids that will be used by the esx datastore creation
    # in order to link the uid value to the other data, I needed to use a nested query against defined volumes and volumes_attributes.Volume
    ansible.builtin.set_fact:
      esx_volumes_and_uids: "{{ esx_volumes_and_uids | default([]) + [{ 'name': item[0].name, 'host_fqdn': item[0].host_fqdn, 'esx_datastore_name': item[0].esx_datastore_name, 'esx_datastore_type': item[0].esx_datastore_type, 'vdisk_uid': item[1].vdisk_UID}] }}"
    when: "item[0].name == item[1].name"
    loop: "{{ query('nested', esx_volumes, volumes_attributes.Volume) }}"

  - name: Print out all values in esx_volumes_and_uids
    ansible.builtin.debug:
      var: esx_volumes_and_uids

  - name: Create new ESX datastore
    # the vmfs device name needs to be all lowercase, but the vdisk_UID value from ibm_svc_info has all uppercase characters.
    community.vmware.vmware_host_datastore:
      auto_expand: true
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      hostname: "{{ vcenter_hostname }}"
      esxi_hostname: "{{ item.host_fqdn }}"
      datastore_name: "{{ item.esx_datastore_name }}"
      datastore_type: "{{ item.esx_datastore_type }}"
      vmfs_device_name: "naa.{{ item.vdisk_uid | lower }}"
      vmfs_version: 6
      state: present
      validate_certs: false
    loop: "{{ esx_volumes_and_uids }}"
  